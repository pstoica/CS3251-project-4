// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: C:\Users\asaltiel\Documents\GT\Fall 2013\CS 3251 - A\Projects\Project_4\Server\structs.proto
package com.example.myfirstapp;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Header extends Message {

  public static final MethodType DEFAULT_METHOD = MethodType.LIST;
  public static final Integer DEFAULT_LIMIT = 0;
  public static final List<Song> DEFAULT_SONGS = Collections.emptyList();

  @ProtoField(tag = 1, type = ENUM, label = REQUIRED)
  public final MethodType method;

  @ProtoField(tag = 2, type = INT32)
  public final Integer limit;

  @ProtoField(tag = 3, label = REPEATED)
  public final List<Song> songs;

  private Header(Builder builder) {
    super(builder);
    this.method = builder.method;
    this.limit = builder.limit;
    this.songs = immutableCopyOf(builder.songs);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Header)) return false;
    Header o = (Header) other;
    return equals(method, o.method)
        && equals(limit, o.limit)
        && equals(songs, o.songs);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = method != null ? method.hashCode() : 0;
      result = result * 37 + (limit != null ? limit.hashCode() : 0);
      result = result * 37 + (songs != null ? songs.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Header> {

    public MethodType method;
    public Integer limit;
    public List<Song> songs;

    public Builder() {
    }

    public Builder(Header message) {
      super(message);
      if (message == null) return;
      this.method = message.method;
      this.limit = message.limit;
      this.songs = copyOf(message.songs);
    }

    public Builder method(MethodType method) {
      this.method = method;
      return this;
    }

    public Builder limit(Integer limit) {
      this.limit = limit;
      return this;
    }

    public Builder songs(List<Song> songs) {
      this.songs = songs;
      return this;
    }

    @Override
    public Header build() {
      checkRequiredFields();
      return new Header(this);
    }
  }

  public enum MethodType {
    @ProtoEnum(0)
    LIST,
    @ProtoEnum(1)
    DIFF,
    @ProtoEnum(2)
    PULL,
    @ProtoEnum(3)
    LEAVE,
    @ProtoEnum(4)
    CAP,
  }
}
