/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: structs.proto */

#ifndef PROTOBUF_C_structs_2eproto__INCLUDED
#define PROTOBUF_C_structs_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Header Header;
typedef struct _Song Song;


/* --- enums --- */

typedef enum _Header__MethodType {
  HEADER__METHOD_TYPE__LIST = 0,
  HEADER__METHOD_TYPE__DIFF = 1,
  HEADER__METHOD_TYPE__PULL = 2,
  HEADER__METHOD_TYPE__LEAVE = 3,
  HEADER__METHOD_TYPE__CAP = 4
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(HEADER__METHOD_TYPE)
} Header__MethodType;

/* --- messages --- */

struct  _Header
{
  ProtobufCMessage base;
  Header__MethodType method;
  protobuf_c_boolean has_limit;
  int32_t limit;
  size_t n_songs;
  Song **songs;
};
#define HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&header__descriptor) \
    , 0, 0,0, 0,NULL }


struct  _Song
{
  ProtobufCMessage base;
  char *title;
  ProtobufCBinaryData checksum;
  int32_t lenofsong;
};
#define SONG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&song__descriptor) \
    , NULL, {0,NULL}, 0 }


/* Header methods */
void   header__init
                     (Header         *message);
size_t header__get_packed_size
                     (const Header   *message);
size_t header__pack
                     (const Header   *message,
                      uint8_t             *out);
size_t header__pack_to_buffer
                     (const Header   *message,
                      ProtobufCBuffer     *buffer);
Header *
       header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   header__free_unpacked
                     (Header *message,
                      ProtobufCAllocator *allocator);
/* Song methods */
void   song__init
                     (Song         *message);
size_t song__get_packed_size
                     (const Song   *message);
size_t song__pack
                     (const Song   *message,
                      uint8_t             *out);
size_t song__pack_to_buffer
                     (const Song   *message,
                      ProtobufCBuffer     *buffer);
Song *
       song__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   song__free_unpacked
                     (Song *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Header_Closure)
                 (const Header *message,
                  void *closure_data);
typedef void (*Song_Closure)
                 (const Song *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor header__descriptor;
extern const ProtobufCEnumDescriptor    header__method_type__descriptor;
extern const ProtobufCMessageDescriptor song__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_structs_2eproto__INCLUDED */
